import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.zjy.north.rukuapp"
        minSdkVersion 22
        targetSdkVersion 28
        versionCode 8
        versionName "3.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            // 设置支持的 SO 库构架，注意这里要根据你的实际情况来设置
//            abiFilters 'armeabi' 'armeabi-v7a'
            abiFilters "armeabi", "armeabi-v7a"
            //, 'arm64-v8a', 'x86', 'x86_64', 'mips', 'mips64'
        }
        manifestPlaceholders = [pkName: applicationId]
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                File relaseDir = new File("D:\\dyj\\app")
                def tag = "rk"
                File f = new File(relaseDir, "dyj_" + tag +"\\apk")
                if (!f.exists()) {
                    f.mkdirs()
                }
                def pkApp = variant.getPackageApplicationProvider().get()
                //    var pkApp = variant.getPackageApplication()//3.3以前gradle, 2019被移除
                if (variant.buildType.name != "debug") {//防止AS无法安装debug包(apk)
                    pkApp.outputDirectory = f
                }
                def defaultConfig = android["defaultConfig"]
                def tarApiVersion = defaultConfig["targetSdkVersion"]
                pkApp.outputScope.apkDatas.forEach { apkData ->
                    //这个修改输出APK的文件名
                    apkData.outputFileName = "dyj_" +tag+"_"+
                            variant.versionName + "_" +
                            variant.versionCode + "_t" + tarApiVersion["mApiLevel"] +
                            ".apk"
                }
            }
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['jniLibs']
//            jniLibs.srcDirs = ['jniLibs', '../baidulocation/libs']
        }
    }
}

boolean checkGradlePluginVersion(float checkVersion) {
    println("---------------I'm now compiling with gradle " + project.gradle.gradleVersion)
    String dname = "com.android.tools.build:gradle"
    String fileContent = rootProject.buildscript.getSourceFile().text
    int index = fileContent.indexOf(dname)
    int index2 = fileContent.indexOf("'", index + 1)

    String version = fileContent.substring(index + dname.length() + 1, index2)
    println("---------------dependency version " + version)
    Pattern mPattern = Pattern.compile("\\d\\.\\d")
    Matcher matcher = mPattern.matcher(version)
    while (matcher.find()) {
    }
    matcher.findAll().each { it -> println(it) }
    def mVersion = matcher.findAll()[0]
    if (mVersion != null) {
        float mainVersion = Float.parseFloat(mVersion)
        if (mainVersion > checkVersion) {
            println("---------------gradle plugin higher than ${checkVersion}")
            return true
        }
    }
    return false
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation 'commons-net:commons-net:3.6'
    implementation 'me.drakeet.materialdialog:library:1.3.1'
    api('com.rengwuxian.materialedittext:library:2.1.4') {
        exclude group: 'com.android.support'
    }
    implementation 'com.alibaba:fastjson:1.2.58'
    api "android.arch.lifecycle:extensions:1.1.1"
    implementation project(':redlinescan')
    implementation project(':baidulocation')
}
